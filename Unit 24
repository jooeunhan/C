// 24.1 시프트 연산과 2의 거듭제곱 알아보기 //
#include <stdio.h>
    
int main()
{
    unsigned char num1 = 1;

    printf("%u\n", num1 << 1);
    printf("%u\n", num1 << 2);
    printf("%u\n", num1 << 3);
    printf("%u\n", num1 << 4);
    printf("%u\n", num1 << 5);
    printf("%u\n", num1 << 6);
    printf("%u\n", num1 << 7);

    return 0;
}

// 24.2 시프트 연산으로 자릿수를 넘어서는 경우 알아보기 //
#include <stdio.h>
    
int main()
{
    unsigned char num1 = 240;    // 1111 0000
    unsigned char num2 = 15;     // 0000 1111

    unsigned char num3, num4;

    num3 = num1 << 2;
    num4 = num2 >> 2;

    printf("%d\n", num3);    // 192: 1100 0000: 맨 앞의 11이 사라져서 1100 0000이 됨
    printf("%d\n", num4);    // 3: 0000 0011: 맨 뒤의 11이 사라져서 0000 0011이 

    return 0;
}

// 24.3 부호 있는 자료형의 비트 연산 알아보기 //
// 부호 있는 자료형과 없는 자료형
#include <stdio.h>
    
int main()
{
    unsigned char num1 = 131;    // 131: 1000 0011
    char num2 = -125;            // -125: 1000 0011 (2의 보수)

    unsigned char num3;
    char num4;

    num3 = num1 >> 5;
    num4 = num2 >> 5;

    printf("%u\n", num3);    // 4: 0000 0100: 
    printf("%d\n", num4);    // -4: 1111 1100: 

    return 0;
}

// 부호 비트가 0인 양수에 >> 연산
#include <stdio.h>
    
int main()
{
    char num1 = 67;    // 0100 0011
    char num2;

    num2 = num1 >> 5;

    printf("%d\n", num2);      // 2: 0000 0010

    return 0;
}

// 부호 있는 자료형에서 << 연산
#include <stdio.h>
    
int main()
{
    char num1 = 113;    // 0111 0001
    char num2 = -15;    // 1111 0001
    char num3, num4, num5, num6;

    num3 = num1 << 2;
    num4 = num2 << 2;

    num5 = num1 << 4;
    num6 = num2 << 4;

    printf("%d\n", num3);    // -60: 1100 0100: 부호 비트를 덮어쓰게 되므로 양수에서 음수가 됨(오버플로우 상황)
    printf("%d\n", num4);    // -60
    printf("%d\n", num5);    // 16: 0001 0000
    printf("%d\n", num6);    // 16: 부호 비트를 덮어쓰게 되므로 음수에서 양수가 됨(오버플로우 상황)

    return 0;
}

// 24.4 비트 연산자로 플래그 처리하기 //
// => 리눅스, 하드웨어에서 주로 사용
// 특정 비트를 켜는 법
#include <stdio.h>
    
int main()
{
    unsigned char flag = 0;

    flag |= 1;    // 0000 0001
    flag |= 2;    // 0000 0010
    flag |= 4;    // 0000 0100
    // 1, 2, 4는 마스크라고 함

    printf("%u\n", flag);

    if (flag & 1)
        printf("0000 0001은 켜져 있음\n");
    else
        printf("0000 0001은 꺼져 있음\n");

    if (flag & 2)
        printf("0000 0010은 켜져 있음\n");
    else
        printf("0000 0010은 꺼져 있음\n");

    if (flag & 4)
        printf("0000 0100은 켜져 있음\n");
    else
        printf("0000 0100은 꺼져 있음\n");

    /* 결과값
    7
    0000 0001은 켜져 있음
    0000 0010은 켜져 있음
    0000 0100은 켜져 있음*/

    return 0;
}

// 특정 비트를 끄는 법
#include <stdio.h>
    
int main()
{
    unsigned char flag = 7;    // 0000 0111

    flag &= ~2;    // 1111 1101

    printf("%u\n", flag);

    if (flag & 1)
        printf("0000 0001은 켜져 있음\n");
    else
        printf("0000 0001은 꺼져 있음\n");

    if (flag & 2)
        printf("0000 0010은 켜져 있음\n");
    else
        printf("0000 0010은 꺼져 있음\n");

    if (flag & 4)
        printf("0000 0100은 켜져 있음\n");
    else
        printf("0000 0100은 꺼져 있음\n");

    /* 결과값
    5 (0000 0101)
    0000 0001은 켜져 있음
    0000 0010은 꺼져 있음
    0000 0100은 켜져 있음*/

    return 0;
}

// 꺼진 비트는 켜고, 켜진 비트는 끄는 법 (토글)
#include <stdio.h>
    
int main()
{
    unsigned char flag = 7;    // 0000 0111

    flag ^= 2;    // 0000 0010
    flag ^= 8;    // 0000 1000

    printf("%u\n", flag);

    if (flag & 1)
        printf("0000 0001은 켜져 있음\n");
    else
        printf("0000 0001은 꺼져 있음\n");

    if (flag & 2)
        printf("0000 0010은 켜져 있음\n");
    else
        printf("0000 0010은 꺼져 있음\n");

    if (flag & 4)
        printf("0000 0100은 켜져 있음\n");
    else
        printf("0000 0100은 꺼져 있음\n");

    if (flag & 8)
        printf("0000 1000은 켜져 있음\n");
    else
        printf("0000 1000은 꺼져 있음\n");

    /* 결과값
    13 (0000 1101)
    0000 0001은 켜져 있음
    0000 0010은 꺼져 있음
    0000 0100은 켜져 있음
    0000 1000은 켜져 있음*/

    return 0;
}

// 심사문제
#define __USE_MINGW_ANSI_STDIO 1
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main()
{
    unsigned char flag = 16;
    unsigned char num1, num2;

    scanf("%hhu %hhu", &num1, &num2);

    flag |= (num1 << 3);
    flag &= ~(num2 >> 2);
    flag ^= 2 << 6;

    printf("%u\n", flag);

    return 0;
}
