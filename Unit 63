// 63.1 포인터 매개변수 사용하기 //
// 일반적 변수를 매개변수
#include <stdio.h>

void swapNumber(int first, int second)
{
    int temp;

    temp = first;
    first = second;
    second = temp;
}

int main()
{
    int num1 = 10;
    int num2 = 20;

    swapNumber(num1, num2);

    printf("%d %d", num1, num2);    // 10 20

    return 0;
}

// 포인터를 매개변수
#include <stdio.h>

void swapNumber(int *first, int *second)
{
    int temp;

    temp = *first;
    *first = *second;
    *second = temp;
}

int main()
{
    int num1 = 10;
    int num2 = 20;

    swapNumber(&num1, &num2);

    printf("%d %d", num1, num2);    // 20 10

    return 0;
}

// 63.2 void 포인터 매개변수 사용하기 //
#include <stdio.h>

enum TYPE {
    TYPE_CHAR,
    TYPE_INT,
    TYPE_FLOAT
};

void swapValue(void* ptr1, void* ptr2, enum TYPE t)
{
    switch (t)
    {
    case TYPE_CHAR: 
    {
        char temp;
        temp = *(char*)ptr1;
        *(char*)ptr1 = *(char*)ptr2;
        *(char*)ptr2 = temp;
        break;
    }
    case TYPE_INT:
    {
        int temp;
        temp = *(int*)ptr1;
        *(int*)ptr1 = *(int*)ptr2;
        *(int*)ptr2 = temp;
        break;
    }
    case TYPE_FLOAT:
    {
        float temp;
        temp = *(float*)ptr1;
        *(float*)ptr1 = *(float*)ptr2;
        *(float*)ptr2 = temp;
        break;
    }
    }
}

int main()
{
    char c1 = 'a';
    char c2 = 'b';
    swapValue(&c1, &c2, TYPE_CHAR);
    printf("%c %c\n", c1, c2);        // b a

    int num1 = 10;
    int num2 = 20;
    swapValue(&num1, &num2, TYPE_INT);
    printf("%d %d\n", num1, num2);    // 20 10

    float num3 = 1.234567f;
    float num4 = 7.654321f;
    swapValue(&num3, &num4, TYPE_FLOAT);
    printf("%f %f\n", num3, num4);    // 7.654321 1.234567

    return 0;
}

// 63.3 이중 포인터 매개변수 사용하기 //
#include <stdio.h>
#include <stdlib.h>

void allocMemory(void **ptr, int size)
{
    *ptr = malloc(size);
}

int main()
{
    long long* numPtr = NULL;

    allocMemory(&numPtr, sizeof(long long));

    *numPtr = 10;
    printf("%lld\n", *numPtr);    // 10

    free(numPtr);

    return 0;
}

// 63.4 문자열 매개변수 사용하기 //
// 매개변수 - 문자열 포인터
#include <stdio.h>
#include <stdlib.h>

void helloString(char* s1)
{
    printf("Hello, %s\n", s1);
}

int main()
{
    helloString("world!");    // Hello, world!

    return 0;
}

// 매개변수 - 배열 형태의 문자열 포인터
#include <stdio.h>
#include <stdlib.h>

void helloString(char *s1)
{
    printf("Hello, %s\n", s1);
}

int main()
{
    char s1[10] = "world!";

    helloString(s1);    // Hello, world!

    return 0;
}

// 매개변수 - 문자 배열을 확실히 해주는 방법
#include <stdio.h>
#include <stdlib.h>

void helloString(char s1[])
{
    printf("Hello, %s\n", s1);
}

int main()
{
    char s1[10] = "world!";

    helloString(s1);          // Hello, world!
    helloString("world!");    // Hello, world!

    return 0;
}

// 심사문제: 몫과 나머지를 구하는 함수 만들기
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int getQuotientAndRemainder(int num1,int num2, int *remainder)
{
    int quotient = num1 / num2;
    *remainder = num1 % num2;

    return quotient;
}

int main()
{
    int num1;
    int num2;
    int quotient;     // 몫
    int remainder;    // 나머지

    scanf("%d %d", &num1, &num2);

    quotient = getQuotientAndRemainder(num1, num2, &remainder);

    printf("%d %d\n", quotient, remainder);

    return 0;
}

// 심사문제: 함수에서 메모리를 할당하여 배열 만들기
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

void allocArray(void **ptr, int size, int fullSize)
{
    *ptr = malloc(fullSize * size);
}

int main()
{
    long long* numArr1;
    int* numArr2;

    allocArray((void**)&numArr1, 10, sizeof(long long));
    allocArray((void**)&numArr2, 3, sizeof(int));

    scanf("%lld %d", &numArr1[9], &numArr2[2]);
    printf("%lld %d\n", numArr1[9], numArr2[2]);

    free(numArr2);
    free(numArr1);

    return 0;
}

// 심사문제: 문자열 매개변수 사용하기
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

char printFullName(char familyName[], char givenName[])
{
    printf("%s%s", familyName, givenName);
}

int main()
{
    char familyName[31];
    char givenName[31];

    scanf("%s %s", familyName, givenName);

    printFullName(familyName, givenName);

    return 0;
}
