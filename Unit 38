// 38.1 포인터에 할당된 메모리를 배열처럼 사용하기 //
#include <stdio.h>
#include <stdlib.h>

int main()
{
    int *numPtr = malloc(sizeof(int) * 10);

    numPtr[0] = 10;
    numPtr[9] = 20;

    printf("%d\n", numPtr[0]);    // 10
    printf("%d\n", numPtr[9]);    // 20

    free(numPtr);

    return 0;
}

// 38.2 입력한 크기만큼 메모리를 할당하여 배열처럼 사용하기 //
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

int main()
{
    int size;

    scanf("%d", &size);    // 5

    int *numPtr = malloc(sizeof(int) * size);

    for (int i = 0; i < size; i++)
    {
        numPtr[i] = i;
    }

    for (int i = 0; i < size; i++)
    {
        printf("%d\n", numPtr[i]);
    }

    free(numPtr);

    /* 0
       1
       2
       3
       4 */

    return 0;
}

// 38.3 포인터에 할당된 메모리를 2차원 배열처럼 사용하기 //
#include <stdio.h>
#include <stdlib.h>

int main()
{
    int** m = malloc(sizeof(int*) * 3);

    for (int i = 0; i < 3; i++)
    {
        m[i] = malloc(sizeof(int) * 4);
    }

    m[0][0] = 1;
    m[2][0] = 5;
    m[2][3] = 2;

    printf("%d\n", m[0][0]);    // 1
    printf("%d\n", m[2][0]);    // 5
    printf("%d\n", m[2][3]);    // 2

    for (int i = 0; i < 3; i++)
    {
        free(m[i]);
    }

    free(m);

    return 0;
}

// 38.4 입력한 크기만큼 메모리를 할당하여 포인터를 2차원 배열처럼 사용하기 //
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

int main()
{
    int row, col;

    scanf("%d %d", &row, &col);

    int** m = malloc(sizeof(int*) * row);

    for (int i = 0; i < row; i++)
    {
        m[i] = malloc(sizeof(int) * col);
    }

    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            m[i][j] = i + j;
        }
    }

    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            printf("%d ", m[i][j]);
        }
        printf("\n");
    }

    for (int i = 0; i < row; i++)
    {
        free(m[i]);
    }

    free(m);

    return 0;
}

// 심사문제: 단위행렬 만들기
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

int main()
{
    int num1;

    scanf("%d", &num1);

    int** m = malloc(sizeof(int*) * num1);

    for (int i = 0; i < num1; i++)
    {
        m[i] = malloc(sizeof(int) * num1);
    }

    for (int i = 0; i < num1; i++)
    {
        for (int j = 0; j < num1; j++)
        {
            if (i == j)
                m[i][j] = 1;
            else
                m[i][j] = 0;
        }
    }

    for (int i = 0; i < num1; i++)
    {
        for (int j = 0; j < num1; j++)
        {
            printf("%d ", m[i][j]);
        }
        printf("\n");
    }

    for (int i = 0; i < num1; i++)
    {
        free(m[i]);
    }

    free(m);

    return 0;
}

// 심사문제: 지뢰찾기
