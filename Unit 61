// 61.1 정수, 실수, 불 반환값 사용하기 //
// 정수 반환
#include <stdio.h>

int one()
{
    return 1;
}

int main()
{
    int num1;

    num1 = one();

    printf("%d\n", num1);    // 1

    return 0;
}

// 실수, 불 값 반환
#include <stdio.h>
#include <stdbool.h>

float realNumber()
{
    return 1.234567f;
}

bool truth()
{
    return true;
}

int main()
{
    float num1;
    bool b1;

    num1 = realNumber();
    b1 = truth();

    printf("%f\n", num1);    // 1.234567
    printf("%d\n", b1);      // 1

    return 0;
}

// 61.2 포인터 반환하기 //
#include <stdio.h>

int* ten()
{
    int num1 = 10;

    return &num1;
}

int main()
{
    int* numPtr;

    numPtr = ten();

    printf("%d\n", *numPtr);    // 10

    return 0;
}
// 컴파일 경고 발생 후 잘 작동하긴 하지만 올바르게 하기 위해서는 malloc으로 메모리 할당 후 해야 함

// 올바른 방법
#include <stdio.h>
#include <stdlib.h>

int* ten()
{
    int* numPtr = malloc(sizeof(int));

    *numPtr = 10;

    return numPtr;
}

int main()
{
    int* numPtr;

    numPtr = ten();

    printf("%d\n", *numPtr);    // 10

    free(numPtr);

    return 0;
}

// 문자열 반환 후 사용
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* helloLiteral()
{
    char* s1 = "Hello, world!";

    return s1;
}

char* helloDynamicMemory()
{
    char* s1 = malloc(sizeof(char) * 20);

    strcpy(s1, "Hello, world!");

    return s1;
}

int main()
{
    char* s1;
    char* s2;

    s1 = helloLiteral();
    s2 = helloDynamicMemory();

    printf("%s\n", s1);    // Hello, world!
    printf("%s\n", s2);    // Hello, world!

    free(s2);

    return 0;
}

// 61.3 void 포인터 반환하기 //
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void* allocMemory()
{
    void* ptr = malloc(100);

    return ptr;
}

int main()
{
    char* s1 = allocMemory();
    strcpy(s1, "Hello, world!");
    printf("%s\n", s1);    // Hello, world!
    free(s1);

    int* numPtr1 = allocMemory();

    numPtr1[0] = 10;
    numPtr1[1] = 20;
    printf("%d %d\n", numPtr1[0], numPtr1[1]);    // 10 20
    free(numPtr1);

    return 0;
}

// 61.4 구조체와 구조체 포인터 반환하기 //
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

struct Person {
    char name[20];
    int age;
    char address[100];
};

struct Person getPerson()
{
    struct Person p;

    strcpy(p.name, "홍길동");
    p.age = 30;
    strcpy(p.address, "서울시 용산구 한남동");

    return p;
}

int main()
{
    struct Person p1;

    p1 = getPerson();

    printf("이름: %s\n", p1.name);
    printf("나이: %d\n", p1.age);
    printf("주소: %s\n", p1.address);

    return 0;
}

// 구조체 포인터
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Person {
    char name[20];
    int age;
    char address[100];
};

struct Person* allocPerson()
{
    struct Person *p = malloc(sizeof(struct Person));

    strcpy(p->name, "홍길동");
    p->age = 30;
    strcpy(p->address, "서울시 용산구 한남동");

    return p;
}

int main()
{
    struct Person *p1;

    p1 = allocPerson();

    printf("이름: %s\n", p1->name);
    printf("나이: %d\n", p1->age);
    printf("주소: %s\n", p1->address);

    free(p1);

    return 0;
}

// 심사문제: 게임 캐릭터 능력치 함수 만들기
#include <stdio.h>
#include <stdbool.h>

float getArmor()
{
    return 20.5f;
}

bool hasSlowSkill()
{
    return false;
}

int main()
{
    float armor;
    bool slow;

    armor = getArmor();
    slow = hasSlowSkill();

    printf("%f\n", armor);
    printf("%s\n", slow == true ? "true" : "false");

    return 0;
}

// 심사문제: 문자열 포인터 반환하기
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* getName()
{
    char* name = malloc(sizeof(char) * 20);

    strcpy(name, "Neptune");

    return name;
}

int main()
{
    char* name;

    name = getName();

    printf("%s\n", name);

    free(name);

    return 0;
}

// 심사문제: 메모리 할당 함수 만들기
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void* allocMemory()
{
    return malloc(100);
}

int main()
{
    char* name;
    float* stats;

    name = allocMemory();
    strcpy(name, "Mercury");
    printf("%s\n", name);
    free(name);

    stats = allocMemory();
    stats[0] = 87.969f;
    stats[1] = 115.8776f;
    printf("%f %f\n", stats[0], stats[1]);
    free(stats);

    return 0;
}

// 심사문제: 2차원 정보 만들기
#include <stdio.h>
#include <stdlib.h>

struct Point2D {
    int x;
    int y;
};

struct Point2D* allocPoint2D()
{
    struct Point2D* pos = malloc(sizeof(struct Point2D));
    pos->x = 90;
    pos->y = 75;
    return pos;
}

int main()
{
    struct Point2D* pos1;

    pos1 = allocPoint2D();

    printf("%d %d\n", pos1->x, pos1->y);

    free(pos1);

    return 0;
}
