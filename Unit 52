// 52.1 구조체와 메모리를 간단하게 0으로 설정하기 //
#include <stdio.h>
#include <string.h>

struct Point2D {
    int x;
    int y;
};

int main()
{
    struct Point2D p1;

    memset(&p1, 0, sizeof(struct Point2D));

    printf("%d %d\n", p1.x, p1.y);    // 0 0: memset 함수를 이용하여 모두 0으로 설정

    return 0;
}

// 동적 메모리에 값을 할당
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Point2D {
    int x;
    int y;
};

int main()
{
    struct Point2D *p1 = malloc(sizeof(struct Point2D));

    memset(p1, 0, sizeof(struct Point2D));

    printf("%d %d\n", p1->x, p1->y);    // 0 0

    free(p1);

    return 0;
}

// 52.2 구조체와 메모리 복사하기 //
#include <stdio.h>
#include <string.h>    // memcpy 선언된 헤더 파일

struct Point2D {
    int x;
    int y;
};

int main()
{
    struct Point2D p1;
    struct Point2D p2;

    p1.x = 10;
    p1.y = 20;

    memcpy(&p2, &p1, sizeof(struct Point2D));    // 앞에 값(목적지)에 뒤에 값을 저장

    printf("%d %d\n", p2.x, p2.y);    // 10 20

    return 0;
}

// 동적 메모리 복사
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Point2D {
    int x;
    int y;
};

int main()
{
    struct Point2D *p1 = malloc(sizeof(struct Point2D));
    struct Point2D *p2 = malloc(sizeof(struct Point2D));

    p1->x = 10;
    p1->y = 20;

    memcpy(p2, p1, sizeof(struct Point2D));

    printf("%d %d\n", p2->x, p2->y);    // 10 20

    free(p2);
    free(p1);

    return 0;
}
// 동적 메모리를 구조체로, 구조체를 동적 메모리로 섞어서 쓰는 것도 가능

// 심사문제: 인적 정보 삭제하기
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

struct Person {
    char name[20];
    int age;
    char address[100];
};

int main()
{
    struct Person p1;

    strcpy(p1.name, "홍길동");
    p1.age = 30;
    strcpy(p1.address, "서울시 용산구 한남동");

    memset(&p1, 0, sizeof(struct Person));

    printf("이름: %s\n", p1.name);
    printf("나이: %d\n", p1.age);
    printf("주소: %s\n", p1.address);

    return 0;
}

// 심사문제: 인적 정보 복제하기
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Person {
    char name[20];
    int age;
    char address[100];
};

int main()
{
    struct Person* p1 = malloc(sizeof(struct Person));
    struct Person p2;

    strcpy(p1->name, "고길동");
    p1->age = 40;
    strcpy(p1->address, "서울시 서초구 반포동");

    memcpy(&p2, p1, sizeof(struct Person));

    printf("이름: %s\n", p2.name);
    printf("나이: %d\n", p2.age);
    printf("주소: %s\n", p2.address);

    free(p1);

    return 0;

}
