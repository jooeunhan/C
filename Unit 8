// 8.1 실수형 변수 선언하기 //

// 소수점을 활용한 실수 저장 방법
#include <stdio.h>

int main()
{
    float num1 = 0.1f;               // 단정밀도 부동소수점 변수를 선언하고 값을 할당
                                     // float는 숫자 뒤에 f를 붙임
    double num2 = 3867.215820;       // 배정밀도 부동소수점 변수를 선언하고 값을 할당
                                     // double은 숫자 뒤에 아무것도 붙이지 않음
    long double num3 = 9.327513l;    // 배정밀도 부동소수점 변수를 선언하고 값을 할당
                                     // long double은 숫자 뒤에 l을 붙임

    //float와 double은 %f로 long double은 %Lf로 서식지정자 출력 (float 앞글자 따)
    printf("%f %f %Lf\n", num1, num2, num3);
    //결과값: 0.100000 3867.215820 9.327513

    return 0;
}

// 지수 표기법을 활용한 실수 저장 방법
#include <stdio.h>

int main()
{
    float num1 = 3.e5f;             // 지수가 양수일 때는 + 생략
    double num2 = -1.3827e-2;
    long double num3 = 5.21e+9l;    // 근데 얜 왜 안했지?...

    printf("%f %f %Lf\n", num1, num2, num3);

    printf("%e %e %Le\n", num1, num2, num3);    // 지수표기법 앞글자를 따서 e, Le
    // 결과값: 300000.000000 -0.013827 5210000000.000000
    //         3.000000e+05 - 1.382700e-02 5.210000e+09

    return 0;
}

// 8.2 자료형 크기 구하기 //
#include <stdio.h>

int main()
{
    float num1 = 0.0f;
    double num2 = 0.0;
    long double num3 = 0.0l;

    printf("float: %d, double: %d, long double: %d\n",
        sizeof(num1),
        sizeof(num2),
        sizeof(num3)
    );
    // 결과값: float: 4, double: 8, long double: 8

    return 0;
}

// 8.3 최솟값과 최댓값 표현하기 //
#include <stdio.h>
#include <float.h> // 실수 자료형의 양수 최솟값, 최댓값이 정의된 헤더 파일

int main()
{
    float num1 = FLT_MIN;
    float num2 = FLT_MAX;
    double num3 = DBL_MIN;
    double num4 = DBL_MAX;
    long double num5 = LDBL_MIN;
    long double num6 = LDBL_MAX;

    printf("%.40f %.2f\n", num1, num2);    // 서식지정자를 %.40f %.2f 등으로 지정하면 해당 숫자 만큼 소수점 이하 자릿수 출력
    printf("%e %e\n", num3, num4);         // double과 long double은 최소, 최댓값들의 소수점 이하 자리가 매우 길어
    printf("%Le %Le\n", num5, num6);       // 서식지정자로 %e %Le를 사용하여 지수 표기법으로 출력
    // 결과값: 0.0000000000000000000000000000000000000118 340282346638528859811704183484516925440.00
    //         2.225074e-308 1.797693e+308
    //         2.225074e-308 1.797693e+308

    return 0;
}

// 8.4 오버플로우와 언더플로우 알아보기 //
#include <stdio.h>
#include <float.h>

int main()
{
    float num1 = FLT_MIN;
    float num2 = FLT_MAX;

    num1 = num1 / 100000000.0f;    // 양수 최솟값을 큰 수로 나누면 아주 작은 수가 되면서 언더플로우 발생(0에 무한대로 가까워짐)
    num2 = num2 * 1000.0f;         // 양수 최댓값에 1000.0을 곱하면 저장할 수 있는 범위를 넘어서 오버플로우 발생(INF = infinty 무한)

    printf("%e %e\n", num1, num2);
    // 결과값: 0.000000e+00 inf

    return 0;
}
