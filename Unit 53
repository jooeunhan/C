// 53.1 구조체 배열 선언하기 //
#include <stdio.h>

struct Point2D {
	int x;
	int y;
};

int main()
{
	struct Point2D p[3];

	p[0].x = 10;
	p[0].y = 20;
	p[1].x = 30;
	p[1].y = 40;
	p[2].x = 50;
	p[2].y = 60;

	printf("%d %d\n", p[0].x, p[0].y);    // 10 20
	printf("%d %d\n", p[1].x, p[1].y);    // 30 40
	printf("%d %d\n", p[2].x, p[2].y);    // 50 60

	return 0;
}

// 53.2 구조체 포인터 배열 선언하기 //
#include <stdio.h>
#include <stdlib.h>

struct Point2D {
	int x;
	int y;
};

int main()
{
	struct Point2D *p[3];

	for (int i = 0; i < sizeof(p) / sizeof(struct Point2D *); i++)
	{
		p[i] = malloc(sizeof(struct Point2D));
	}

	p[0]->x = 10;
	p[0]->y = 20;
	p[1]->x = 30;
	p[1]->y = 40;
	p[2]->x = 50;
	p[2]->y = 60;

	printf("%d %d\n", p[0]->x, p[0]->y);    // 10 20
	printf("%d %d\n", p[1]->x, p[1]->y);	// 30 40
	printf("%d %d\n", p[2]->x, p[2]->y);	// 50 60

	for (int i = 0; i < sizeof(p) / sizeof(struct Point2D *); i++)
	{
		free(p[i]);
	}

	return 0;
}

// 심사문제: 선의 길이 구하기
#include <stdio.h>
#include <stdlib.h>

struct Point2D {
	int x;
	int y;
};

int main()
{
	struct Point2D p[4];
	double length = 0.0f;

	scanf("%d %d %d %d %d %d %d %d",
		&p[0].x, &p[0].y, &p[1].x, &p[1].y, &p[2].x, &p[2].y, &p[3].x, &p[3].y
);

	for (int i = 0; i < (sizeof(p) / sizeof(struct Point2D)) - 1; i++)
	{
		length += sqrt(pow(p[i + 1].x - p[i].x, 2) + pow(p[i + 1].y - p[i].y, 2));
	}

	printf("%f\n", length);

	return 0;
}

// 심사문제: 나이가 가장 많은 사람 찾기
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

struct Person {
	char name[30];
	int age;
};

int main()
{
	struct Person* p[5];

	for (int i = 0; i < sizeof(p) / sizeof(struct Person *); i++)
	{
		p[i] = malloc(sizeof(struct Person));
	}

	for (int j = 0; j < sizeof(p) / sizeof(struct Person*); j++)
	{
		scanf("%s %d", p[j]->name, &p[j]->age);
	}

	int oldest = 0;
	int age = 0;

	for (int k = 0; k < sizeof(p) / sizeof(struct Person*); k++)
	{
		if (p[k]->age > age)
		{
			age = p[k]->age;
			oldest = k;
		}
	}

	printf("%s\n", p[oldest]->name);

    for (int i = 0; i < sizeof(p) / sizeof(struct Person*); i++)
    {
        free(p[i]);
    }

    return 0;
}
