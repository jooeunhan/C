// 57.1 열거형 정의하기 //
#include <stdio.h>

enum DayOfWeek {
	Sunday = 0,
	Monday,
	Tuesday,
	Wednesday,
	Thursday,
	Friday,
	Saturday
};

int main()
{
	enum DayOfWeek week;

	week = Tuesday;

	printf("%d\n", week);    // 2

	return 0;
}

// 57.2 열거형을 switch에 활용하기 //
#include <stdio.h>

enum LuxSkill {
	LightBinding = 1,
	PrismaticBarrier,
	LucentSingularity,
	FinalSpark
};

int main()
{
	enum LuxSkill skill;

	skill = LightBinding;

	switch (skill)
	{
	case LightBinding:
		printf("LightBinding\n");
		break;
	case PrismaticBarrier:
		printf("PrismaticBarrier\n");
		break;
	case LucentSingularity:
		printf("LucentSingularity\n");
		break;
	case FinalSpark:
		printf("FinalSpark\n");
	default:
		break;
	}

	return 0;
}

// 57.3 열거형을 for에 활용하기 //
#include <stdio.h>

typedef enum _DayOfWeek {
	Sunday = 0,
	Monday,
	Tuesday,
	Wednesday,
	Thursday,
	Friday,
	Saturday,
	DayOfWeekCount
} DayOfWeek;

int main()
{
	for (DayOfWeek i = Sunday; i < DayOfWeekCount; i++)
	{
		printf("%d\n", i);
	}

	return 0;
}

// 심사문제: 프로토콜 종류 정의하기
#include <stdio.h>

enum PROTOCOL_TYPE {
	PROTOCOL_IP = 6,
	PROTOCOL_UDP,
	PROTOCOL_TCP
};

int main()
{
	enum PROTOCOL_TYPE p1, p2, p3;

	p1 = PROTOCOL_TCP;
	p2 = PROTOCOL_UDP;
	p3 = PROTOCOL_IP;

	printf("%d %d %d\n", p1, p2, p3);

	return 0;
}

// 심사문제: 게임 캐릭터 스킬 처리하기
#include <stdio.h>

enum MasterYiSkill {
    AlphaStrike = 1,
    Meditation,
    WujuStyle,
    Highlander
};

int main()
{
    enum MasterYiSkill skill;

    skill = Meditation;

    switch (skill)
    {
    case AlphaStrike:
        printf("일격 필살\n");
        break;
    case Meditation:
        printf("명상\n");
        break;
    case WujuStyle:
        printf("우주류 검술\n");
        break;
    case Highlander:
        printf("최후의 전사\n");
        break;
    default:
        break;
    }
    return 0;
}

// 심사문제: 인터페이스 타입 출력하기
#include <stdio.h>

typedef enum _INTERFACE_TYPE {
    InterfaceTypeUndefined = -1,
    Internal,
    Isa,
    Eisa,
    MicroChannel,
    TurboChannel,
    PCIBus,
    VMEBus,
    NuBus,
    PCMCIABus,
    CBus,
    MPIBus,
    MPSABus,
    ProcessorInternal,
    InternalPowerBus,
    PNPISABus,
    PNPBus,
    MaximumInterfaceType
} INTERFACE_TYPE, * PINTERFACE_TYPE;

int main()
{
    for (INTERFACE_TYPE i = Internal; i < MaximumInterfaceType; i++)
    {
        printf("%d ", i);
    }

    return 0;
}
