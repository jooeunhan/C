// 7.1 정수형 변수 사용하기 //
#include <stdio.h>

int main()
{
    char num1 = -10;           // 1바이트 부호 있는 정수형으로 변수를 선언하고 값 할당
    short num2 = 30000;        // 2바이트 부호 있는 정수형으로 변수를 선언하고 값 할당
    int num3 = -1234567890;    // 4바이트 부호 있는 정수형으로 변수를 선언하고 값 할당
    long num4 = 1234567890;    // 4바이트 부호 있는 정수형으로 변수를 선언하고 값 할당
    long long num5 = -1234567890123456789;     // 8바이트 부호 있는 정수형으로 변수를 
                                               // 선언하고 값 할당

    // char, short, int는 %d로 출력하고 long은 %ld, long long은 %lld로 출력
    printf("%d %d %d %ld %lld\n", num1, num2, num3, num4, num5);
    // -10 30000 -1234567890 1234567890 -1234567890123456789

    return 0;
}

// 7.2 오버플로우와 언더플로우 알아보기 //
#include <stdio.h>

int main()
{
    char num1 = 128;             // char에 저장할 수 있는 최댓값 127보다 큰 수를 할당
                                 // 오버플로우 발생

    unsigned char num2 = 256;    // unsigned char에 저장할 수 있는 최댓값 255보다 큰 수를 할당
                                 // 오버플로우 발생

    printf("%d %u\n", num1, num2);    // -128 0: 저장할 수 있는 범위를 넘어서므로 
                                      // 최솟값부터 다시 시작

    return 0;
}

// 7.3 자료형 크기 구하기 //
// 자료형 크기를 바이트 단위로 구하는 코드
#include <stdio.h>

int main()
{
	int num1 = 0;
	int size;

	size = sizeof num1;// 표현식
	size = sizeof (num1); // 표현식
	size = sizeof int; // 잘못된 방법 error 뜸
	size = sizeof(int);// 자료형
	
	printf("num1의 크기: %d\n", size);

	return 0;
}

// 정수 자료형의 크기를 구하는 코드
#include <stdio.h>

int main()
{
    printf("char: %d, short: %d, int: %d, long: %d, long long: %d\n",
        sizeof(char),        // 결과값 1: sizeof로 char 자료형의 크기를 구함
        sizeof(short),       // 결과값 2: sizeof로 short 자료형의 크기를 구함
        sizeof(int),         // 결과값 4: sizeof로 int 자료형의 크기를 구함
        sizeof(long),        // 결과값 4: sizeof로 long 자료형의 크기를 구함
        sizeof(long long)    // 결과값 8: sizeof로 long long 자료형의 크기를 구함
    );

    return 0;
}

// 7.4 최솟값과 최댓값 표현하기 //
#include <stdio.h>
#include <limits.h> // 자료형의 최댓값과 최솟값이 정의된 헤더 파일

int main()
{
    char num1 = CHAR_MIN;          // char의 최솟값
    short num2 = SHRT_MIN;         // short의 최솟값
    int num3 = INT_MIN;            // int의 최솟값
    long num4 = LONG_MIN;          // long의 최솟값
    long long num5 = LLONG_MIN;    // long long의 최솟값
    // unsigned는 앞에 U만 붙이면 됨
    
    printf("%d %d %d %ld %lld\n", num1, num2, num3, num4, num5);
    // 결과값: -128 - 32768 - 2147483648 - 2147483648 - 9223372036854775808

    return = 0;
}

//최댓값의 오버 플로우
#include <stdio.h>
#include <limits.h>

int main()
{
    char num1 = CHAR_MIN;          // char의 최솟값
    short num2 = SHRT_MIN;         // short의 최솟값
    int num3 = INT_MIN;            // int의 최솟값
    long long num4 = LLONG_MIN;    // long long의 최솟값
    
    printf("%d %d %d %lld\n", num1, num2, num3, num4);
    // 결과값: -128 - 32768 - 2147483648  - 9223372036854775808

    unsigned char num5 = UCHAR_MAX + 1;          // unsigned char의 최댓값보다 큰 수를 할당
                                                 // 오버플로우 발생
    unsigned short num6 = USHRT_MAX + 1;         // unsigned short의 최댓값보다 큰 수를 할당
                                                 // 오버플로우 발생
    unsigned int num7 = UINT_MAX + 1;            // unsigned int의 최댓값보다 큰 수를 할당
                                                 // 오버플로우 발생
    unsigned long long num8 = ULLONG_MAX + 1;    //unsigned long long의 최댓값
                                                 // 오버플로우 발생
    // unsigned는 앞에 U만 붙이면 됨

    // 부호 없는 정수에서 저장할 수 있는 범위를 넘어서면 최솟값 0부터 다시 시작
    printf("%u %u %u %llu\n", num5, num6, num7, num8);
    // 결과값: 0 0 0 0

    return 0;
}

//최솟값의 언더플로우
#include <stdio.h>
#include <limits.h> // 자료형의 최댓값과 최솟값이 정의된 헤더 파일

int main()
{
    char num1 = CHAR_MIN - 1;          // char의 최솟값보다 작은 수를 할당, 언더플로우 발생
    short num2 = SHRT_MIN - 1;         // short의 최솟값보다 작은 수를 할당, 언더플로우 발생
    int num3 = INT_MIN - 1;            // int의 최솟값보다 작은 수를 할당, 언더플로우 발생
    long long num4 = LLONG_MIN - 1;    // long long의 최솟값보다 작은 수를 할당, 언더플로우 발생

    printf("%d %d %d %lld\n", num1, num2, num3, num4);
    // 결과값: 127 32767 2147483647 9223372036854775807

    unsigned char num5 = 0 - 1;         // unsigned char의 최솟값보다 작은 수를 할당
                                        // 언더플로우 발생
    unsigned short num6 = 0 - 1;        // unsigned short의 최솟값보다 작은 수를 할당
                                        // 언더플로우 발생
    unsigned int num7 = 0 - 1;          // unsigned int의 최솟값보다 작은 수를 할당
                                        // 언더플로우 발생
    unsigned long long num8 = 0 - 1;    // unsigned long long의 최솟값보다 작은 수를 할당
                                        // 언더플로우 발생
    
    printf("%u %u %u %llu\n", num5, num6, num7, num8);
    // 결과값: 255 65535 4294967295 18446744073709551615

    return 0;
}

// 7.5 크기가 표시된 정수 자료형 사용하기 //
#include <stdio.h>
#include <stdint.h> // 크기별로 정수 자료형이 정의된 헤더 파일 (정수 자료형 이름의 혼란으로 인한 stinct.h 헤더 파일 추가)

int main()
{
    int8_t num1 = -128;                    // 8비트(1바이트) 크기의 부호 있는 정수형 변수 선언
    int16_t num2 = 32767;                  // 16비트(2바이트) 크기의 부호 있는 정수형 변수 선언 
    int32_t num3 = 2147483647;             // 32비트(4바이트) 크기의 부호 있는 정수형 변수 선언
    int64_t num4 = 9223372036854775807;    // 64비트(8바이트) 크기의 부호 있는 정수형 변수 선언

    // int8_t, int16_t, int32_t는 %d로 출력하고 int64_t는 %lld로 출력
    printf("%d %d %d %lld\n", num1, num2, num3, num4); // -128 32767 2147483647 9223372036854775807

    uint8_t num5 = 255;                      // 8비트(1바이트) 크기의 부호 없는 정수형 변수 선언
    uint16_t num6 = 65535;                   // 16비트(2바이트) 크기의 부호 없는 정수형 변수 선언
    uint32_t num7 = 4294967295;              // 32비트(4바이트) 크기의 부호 없는 정수형 변수 선언
    uint64_t num8 = 18446744073709551615;    // 64비트(8바이트) 크기의 부호 없는 정수형 변수 선언

    // uint8_t, uint16_t, uint32_t는 %u로 출력하고 uint64_t는 %llu로 출력
    printf("%u %u %u %llu\n", num5, num6, num7, num8); // 255 65535 4294967295 18446744073709551615

    return 0;
}
// 파일 압축 및 암호화, 네트워크 프로그래밍 시 유용하며 일반적인 프로그래밍 시에도 stdint.h을 사용하는 것이 좋음음
