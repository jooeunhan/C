// 10.0 상수 사용하기 //
const int con1 = 10; // con1 = 상수, 10 = 리터럴
// 상수는 값이 의도하지 않게 바뀌는 것 방지 => 코드의 의도를 명확하게 바꿈

// 10.1 리터럴 사용하기 //
// 리터럴 사용해보기
#include <stdio.h>

int main()
{
    printf("%d\n", 10);     // 소스코드에서 입력한 값 자체가 리터럴
    printf("%f\n", 0.1f);
    printf("%c\n", 'a');    // 문자열 표기 주의!
    printf("%s\n", "Hello, world!");
    // 결과값: 10
    //         0.100000
    //         a
    //         Hello, world!

    return 0;
}

// 정수 리터럴 표현하기
#include <stdio.h>

int main()
{
    printf("%d\n", 19);        // 10진수 표기
    printf("0%o\n", 017);      // 8진수 표기(10진수와 구별하기 위해 앞에 0)
    printf("0x%X\n", 0x1F);    // 16진수 표기(10진수와 구별하기 위해 앞에 0x)
    // 결과값: 19
    //         017
    //         0x1F

    return 0;
}

// 실수 리터럴 표현하기
#include <stdio.h>

int main()
{
    printf("%f\n", 0.1f);       // 0.100000: 실수 리터럴 소수점 표기
    printf("%f\n", 0.1F);       // 0.100000: 실수 리터럴 소수점 표기
    printf("%f\n", 1.0e-5f);    // 0.000010: 실수 리터럴 지수 표기법
    printf("%f\n", 1.0E-5F);    // 0.000010: 실수 리터럴 지수 표기법
    // 결과값: 0.100000
    //         0.100000
    //         0.000010
    //         0.000010

    return 0;
}

// 10.2 상수 사용하기 //
// const 자료형 상수 이름 = 값
// 상수로 리터럴 표현
#include <stdio.h>

int main()
{
    const int con1 = 1;
    const float con2 = 0.1f;    
    const char con3 = 'a';      // 상수 형태로 값을 선언

    con1 = 2;

    printf("%d %f %c\n", con1, con2, con3); // 이전에 배운 것과 const만 다름
    // 결과값: 1 0.100000 a

    return 0;
}

// 상수가 된 상태에서 const 값을 붙여 할당
#include <stdio.h>

int main()
{
    const int con1 = 1;

    con1 = 2;    // 상수에 값을 할당하면 컴파일 에러 발생

    printf("%d\n", con1);

    return 0;
}

// 10.3 정수 리터럴 접미사 사용하기 //
// 리터럴의 크기를 정확하게 사용하기 위하여 접미사 suffic 사용
#include <stdio.h>

int main()
{
    printf("%ld\n", -10L);                       // long 크기의 정수 리터럴
    printf("%lld\n", -1234567890123456789LL);    // long long 크기의 정수 리터럴

    printf("%u\n", 10U);                         // unsigned int 크기의 정수 리터럴
    printf("%lu\n", 1234567890UL);               // unsigned long 크기의 정수 리터럴

    printf("%lu\n", 10UL);                       // unsigned long 크기의 정수 리터럴
    printf("%llu\n", 1234567890123456789ULL);    // unsigned long long 크기의 정수 리터럴

    return 0;
}

// 8진수와 16진수에도 접미사 사용 가능
#include <stdio.h>

int main()
{
    printf("0%lo\n", 017L);             // long 크기의 8진 정수 리터럴
    printf("0%lo\n", 017UL);            // unsigned long 크기의 8진 정수 리터럴
    printf("0x%lX\n", 0x7FFFFFL);       // long 크기의 16진 정수 리터럴
    printf("0x%lX\n", 0xFFFFFFFFUL);    // unsigned long 크기의 16진 정수 리터럴

    return 0;
}

// 10.4 실수 리터럴 접미사 사용하기 //
// 실수 리터럴에 접미사 사용
#include <stdio.h>

int main()
{
    printf("%f\n", 0.1f);     // 0.100000: float 크기의 실수 리터럴
    printf("%f\n", 0.1F);     // 0.100000: float 크기의 실수 리터럴
    printf("%f\n", 0.1);      // 0.100000: double 크기의 실수 리터럴
    printf("%Lf\n", 0.1l);    // 0.100000: long double 크기의 실수 리터럴
    printf("%Lf\n", 0.1L);    // 0.100000: long double 크기의 실수 리터럴

    printf("%f\n", 1.0e-5f);     // 0.000010: float 크기의 실수 리터럴
    printf("%f\n", 1.0e-5F);     // 0.000010: float 크기의 실수 리터럴
    printf("%f\n", 1.0e-5);      // 0.000010: double 크기의 실수 리터럴
    printf("%Lf\n", 1.0e-5l);    // 0.000010: long double 크기의 실수 리터럴
    printf("%Lf\n", 1.0e-5L);    // 0.000010: long double 크기의 실수 리터럴

    return 0;
}
