// 23.1 비트 AND, OR, XOR 연산자 사용하기 //
#include <stdio.h>

int main()
{
    unsigned char num1 = 1;    // 0000 0001
    unsigned char num2 = 3;    // 0000 0011

    printf("%d\n", num1 & num2);    // 1: 0000 0001
    printf("%d\n", num1 | num2);    // 3: 0000 0011
    printf("%d\n", num1 ^ num2);    // 2: 0000 0010

    return 0;
}

// 23.2 비트 NOT 연산자 사용하기 //
#include <stdio.h>

int main()
{
    unsigned char num1 = 162;    // 162: 1010 0010
    unsigned char num2;
    
    num2 = ~num1;    // 0101 1101

    printf("%u\n", num2);    // 93

    return 0;
}

// 23.3 시프트 연산자 사용하기 //
#include <stdio.h>

int main()
{
    unsigned char num1 = 3;    // 0000 0011
    unsigned char num2 = 24;    // 0001 1000

    printf("%u\n", num1 << 3);    // 24: 0001 1000
    printf("%u\n", num2 >> 2);    // 6: 0000 0110

    // 3 >> 3은 3 * 2^3 = 24
    // 24 >> 2는 24 / 2^2 = 6

    return 0;
}

// 23.4 비트 연산 후 할당하기 //
#include <stdio.h>

int main()
{
    unsigned char num1 = 4;
    unsigned char num2 = 4;
    unsigned char num3 = 4;
    unsigned char num4 = 4;
    unsigned char num5 = 4;

    num1 &= 5;
    num2 |= 2;
    num3 ^= 3;
    num4 <<= 2;
    num5 >>= 2;

    printf("%u\n", num1);    // 4
    printf("%u\n", num2);    // 6
    printf("%u\n", num3);    // 7
    printf("%u\n", num4);    // 16
    printf("%u\n", num5);    // 1

    return 0;
}

// 심사문제 - 23.8 비트 논리 연산자 사용하기
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
    
int main()
{
    unsigned int num1;
    unsigned int num2;

    scanf("%u %u", &num1, &num2);

    printf("%u\n", num1 ^ num2);
    printf("%u\n", num1 | num2);
    printf("%u\n", num1 & num2);
    printf("%u\n", ~num1);

    return 0;
}

// 심사문제 - 23.9 시프트 연산자 사용하기
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
    
int main()
{
    unsigned long long num1;

    scanf("%llu", &num1);

    printf("%llu", num1 << 20 >> 4);

    return 0;
}
